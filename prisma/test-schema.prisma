generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Copy of main schema but using sqlite for tests

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  totalScore    Int       @default(0)
  streakDays    Int       @default(0)
  lastActivity  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  activityLogs  ActivityLog[]
  bonuses       Bonus[]
  penalties     Penalty[]
  dailyScores   DailyScore[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ActivityLog {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        ActivityType
  completed   Boolean     @default(true)
  date        DateTime    @default(now())
  points      Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([userId, date])
}

model DailyScore {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  score     Int      @default(0)
  waterCompleted      Boolean @default(false)
  resistanceCompleted Boolean @default(false)
  cardioCompleted     Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, date])
  @@index([userId, date])
}

model Bonus {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      BonusType
  points    Int
  reason    String
  date      DateTime  @default(now())
  createdAt DateTime  @default(now())
}

model Penalty {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      PenaltyType
  points    Int
  reason    String
  date      DateTime    @default(now())
  createdAt DateTime    @default(now())
}

enum ActivityType {
  WATER
  RESISTANCE
  CARDIO
}

enum BonusType {
  STREAK_3_DAYS
  STREAK_5_DAYS
  WEEKLY_COMPLETION
}

enum PenaltyType {
  MISSED_DAY
  NO_WORKOUT_WEEK
}
